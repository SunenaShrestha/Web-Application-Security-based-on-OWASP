{"ast":null,"code":"\"use client\";\n\n// packages/react/collection/src/collection.tsx\nimport React from \"react\";\nimport { createContextScope } from \"@radix-ui/react-context\";\nimport { useComposedRefs } from \"@radix-ui/react-compose-refs\";\nimport { createSlot } from \"@radix-ui/react-slot\";\nimport { jsx } from \"react/jsx-runtime\";\nfunction createCollection(name) {\n  const PROVIDER_NAME = name + \"CollectionProvider\";\n  const [createCollectionContext, createCollectionScope] = createContextScope(PROVIDER_NAME);\n  const [CollectionProviderImpl, useCollectionContext] = createCollectionContext(PROVIDER_NAME, {\n    collectionRef: {\n      current: null\n    },\n    itemMap: /* @__PURE__ */new Map()\n  });\n  const CollectionProvider = props => {\n    const {\n      scope,\n      children\n    } = props;\n    const ref = React.useRef(null);\n    const itemMap = React.useRef(/* @__PURE__ */new Map()).current;\n    return /* @__PURE__ */jsx(CollectionProviderImpl, {\n      scope,\n      itemMap,\n      collectionRef: ref,\n      children\n    });\n  };\n  CollectionProvider.displayName = PROVIDER_NAME;\n  const COLLECTION_SLOT_NAME = name + \"CollectionSlot\";\n  const CollectionSlotImpl = createSlot(COLLECTION_SLOT_NAME);\n  const CollectionSlot = React.forwardRef((props, forwardedRef) => {\n    const {\n      scope,\n      children\n    } = props;\n    const context = useCollectionContext(COLLECTION_SLOT_NAME, scope);\n    const composedRefs = useComposedRefs(forwardedRef, context.collectionRef);\n    return /* @__PURE__ */jsx(CollectionSlotImpl, {\n      ref: composedRefs,\n      children\n    });\n  });\n  CollectionSlot.displayName = COLLECTION_SLOT_NAME;\n  const ITEM_SLOT_NAME = name + \"CollectionItemSlot\";\n  const ITEM_DATA_ATTR = \"data-radix-collection-item\";\n  const CollectionItemSlotImpl = createSlot(ITEM_SLOT_NAME);\n  const CollectionItemSlot = React.forwardRef((props, forwardedRef) => {\n    const {\n      scope,\n      children,\n      ...itemData\n    } = props;\n    const ref = React.useRef(null);\n    const composedRefs = useComposedRefs(forwardedRef, ref);\n    const context = useCollectionContext(ITEM_SLOT_NAME, scope);\n    React.useEffect(() => {\n      context.itemMap.set(ref, {\n        ref,\n        ...itemData\n      });\n      return () => void context.itemMap.delete(ref);\n    });\n    return /* @__PURE__ */jsx(CollectionItemSlotImpl, {\n      ...{\n        [ITEM_DATA_ATTR]: \"\"\n      },\n      ref: composedRefs,\n      children\n    });\n  });\n  CollectionItemSlot.displayName = ITEM_SLOT_NAME;\n  function useCollection(scope) {\n    const context = useCollectionContext(name + \"CollectionConsumer\", scope);\n    const getItems = React.useCallback(() => {\n      const collectionNode = context.collectionRef.current;\n      if (!collectionNode) return [];\n      const orderedNodes = Array.from(collectionNode.querySelectorAll(`[${ITEM_DATA_ATTR}]`));\n      const items = Array.from(context.itemMap.values());\n      const orderedItems = items.sort((a, b) => orderedNodes.indexOf(a.ref.current) - orderedNodes.indexOf(b.ref.current));\n      return orderedItems;\n    }, [context.collectionRef, context.itemMap]);\n    return getItems;\n  }\n  return [{\n    Provider: CollectionProvider,\n    Slot: CollectionSlot,\n    ItemSlot: CollectionItemSlot\n  }, useCollection, createCollectionScope];\n}\nexport { createCollection };","map":{"version":3,"names":["React","createContextScope","useComposedRefs","createSlot","jsx","createCollection","name","PROVIDER_NAME","createCollectionContext","createCollectionScope","CollectionProviderImpl","useCollectionContext","collectionRef","current","itemMap","Map","CollectionProvider","props","scope","children","ref","useRef","displayName","COLLECTION_SLOT_NAME","CollectionSlotImpl","CollectionSlot","forwardRef","forwardedRef","context","composedRefs","ITEM_SLOT_NAME","ITEM_DATA_ATTR","CollectionItemSlotImpl","CollectionItemSlot","itemData","useEffect","set","delete","useCollection","getItems","useCallback","collectionNode","orderedNodes","Array","from","querySelectorAll","items","values","orderedItems","sort","a","b","indexOf","Provider","Slot","ItemSlot"],"sources":["D:\\thankyoustickers\\Web-Application-Security-based-on-OWASP\\node_modules\\@radix-ui\\react-collection\\src\\collection.tsx"],"sourcesContent":["import React from 'react';\nimport { createContextScope } from '@radix-ui/react-context';\nimport { useComposedRefs } from '@radix-ui/react-compose-refs';\nimport { createSlot, type Slot } from '@radix-ui/react-slot';\n\ntype SlotProps = React.ComponentPropsWithoutRef<typeof Slot>;\ntype CollectionElement = HTMLElement;\ninterface CollectionProps extends SlotProps {\n  scope: any;\n}\n\n// We have resorted to returning slots directly rather than exposing primitives that can then\n// be slotted like `<CollectionItem as={Slot}>â€¦</CollectionItem>`.\n// This is because we encountered issues with generic types that cannot be statically analysed\n// due to creating them dynamically via createCollection.\n\nfunction createCollection<ItemElement extends HTMLElement, ItemData = {}>(name: string) {\n  /* -----------------------------------------------------------------------------------------------\n   * CollectionProvider\n   * ---------------------------------------------------------------------------------------------*/\n\n  const PROVIDER_NAME = name + 'CollectionProvider';\n  const [createCollectionContext, createCollectionScope] = createContextScope(PROVIDER_NAME);\n\n  type ContextValue = {\n    collectionRef: React.RefObject<CollectionElement | null>;\n    itemMap: Map<\n      React.RefObject<ItemElement | null>,\n      { ref: React.RefObject<ItemElement | null> } & ItemData\n    >;\n  };\n\n  const [CollectionProviderImpl, useCollectionContext] = createCollectionContext<ContextValue>(\n    PROVIDER_NAME,\n    { collectionRef: { current: null }, itemMap: new Map() }\n  );\n\n  const CollectionProvider: React.FC<{ children?: React.ReactNode; scope: any }> = (props) => {\n    const { scope, children } = props;\n    const ref = React.useRef<CollectionElement>(null);\n    const itemMap = React.useRef<ContextValue['itemMap']>(new Map()).current;\n    return (\n      <CollectionProviderImpl scope={scope} itemMap={itemMap} collectionRef={ref}>\n        {children}\n      </CollectionProviderImpl>\n    );\n  };\n\n  CollectionProvider.displayName = PROVIDER_NAME;\n\n  /* -----------------------------------------------------------------------------------------------\n   * CollectionSlot\n   * ---------------------------------------------------------------------------------------------*/\n\n  const COLLECTION_SLOT_NAME = name + 'CollectionSlot';\n\n  const CollectionSlotImpl = createSlot(COLLECTION_SLOT_NAME);\n  const CollectionSlot = React.forwardRef<CollectionElement, CollectionProps>(\n    (props, forwardedRef) => {\n      const { scope, children } = props;\n      const context = useCollectionContext(COLLECTION_SLOT_NAME, scope);\n      const composedRefs = useComposedRefs(forwardedRef, context.collectionRef);\n      return <CollectionSlotImpl ref={composedRefs}>{children}</CollectionSlotImpl>;\n    }\n  );\n\n  CollectionSlot.displayName = COLLECTION_SLOT_NAME;\n\n  /* -----------------------------------------------------------------------------------------------\n   * CollectionItem\n   * ---------------------------------------------------------------------------------------------*/\n\n  const ITEM_SLOT_NAME = name + 'CollectionItemSlot';\n  const ITEM_DATA_ATTR = 'data-radix-collection-item';\n\n  type CollectionItemSlotProps = ItemData & {\n    children: React.ReactNode;\n    scope: any;\n  };\n\n  const CollectionItemSlotImpl = createSlot(ITEM_SLOT_NAME);\n  const CollectionItemSlot = React.forwardRef<ItemElement, CollectionItemSlotProps>(\n    (props, forwardedRef) => {\n      const { scope, children, ...itemData } = props;\n      const ref = React.useRef<ItemElement>(null);\n      const composedRefs = useComposedRefs(forwardedRef, ref);\n      const context = useCollectionContext(ITEM_SLOT_NAME, scope);\n\n      React.useEffect(() => {\n        context.itemMap.set(ref, { ref, ...(itemData as unknown as ItemData) });\n        return () => void context.itemMap.delete(ref);\n      });\n\n      return (\n        <CollectionItemSlotImpl {...{ [ITEM_DATA_ATTR]: '' }} ref={composedRefs}>\n          {children}\n        </CollectionItemSlotImpl>\n      );\n    }\n  );\n\n  CollectionItemSlot.displayName = ITEM_SLOT_NAME;\n\n  /* -----------------------------------------------------------------------------------------------\n   * useCollection\n   * ---------------------------------------------------------------------------------------------*/\n\n  function useCollection(scope: any) {\n    const context = useCollectionContext(name + 'CollectionConsumer', scope);\n\n    const getItems = React.useCallback(() => {\n      const collectionNode = context.collectionRef.current;\n      if (!collectionNode) return [];\n      const orderedNodes = Array.from(collectionNode.querySelectorAll(`[${ITEM_DATA_ATTR}]`));\n      const items = Array.from(context.itemMap.values());\n      const orderedItems = items.sort(\n        (a, b) => orderedNodes.indexOf(a.ref.current!) - orderedNodes.indexOf(b.ref.current!)\n      );\n      return orderedItems;\n    }, [context.collectionRef, context.itemMap]);\n\n    return getItems;\n  }\n\n  return [\n    { Provider: CollectionProvider, Slot: CollectionSlot, ItemSlot: CollectionItemSlot },\n    useCollection,\n    createCollectionScope,\n  ] as const;\n}\n\nexport { createCollection };\nexport type { CollectionProps };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}