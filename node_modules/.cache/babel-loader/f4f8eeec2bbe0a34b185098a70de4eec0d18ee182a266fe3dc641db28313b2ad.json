{"ast":null,"code":"useEffect(() => {\n  const fetchLogs = async () => {\n    try {\n      const response = await fetch('http://localhost/backend/api/get_logs.php');\n      if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);\n      const data = await response.json();\n      if (data.success) {\n        setLoginAttempts(data.attempts);\n        const log = data.attempts.find(attempt => attempt.id == logId);\n        if (log) {\n          setSelectedLog(log);\n          const recentFailedAttempts = data.attempts.filter(attempt => attempt.ip_address === log.ip_address && parseInt(attempt.success) === 0 && new Date(attempt.attempt_time) > new Date(Date.now() - 30 * 60 * 1000));\n\n          // Show warning only if it's not already shown for this log\n          if (recentFailedAttempts.length >= 5) {\n            setIsBruteForce(true);\n          } else {\n            setIsBruteForce(false); // Reset when not brute force\n          }\n        }\n      }\n    } catch (error) {\n      console.error('Error fetching logs:', error);\n    }\n  };\n  if (isOpen && logId) {\n    fetchLogs();\n  } else {\n    setIsBruteForce(false); // Reset when modal closes\n    setSelectedLog(null);\n  }\n}, [isOpen, logId]);\nexport default LogDetail;","map":{"version":3,"names":["useEffect","fetchLogs","response","fetch","ok","Error","status","data","json","success","setLoginAttempts","attempts","log","find","attempt","id","logId","setSelectedLog","recentFailedAttempts","filter","ip_address","parseInt","Date","attempt_time","now","length","setIsBruteForce","error","console","isOpen","LogDetail"],"sources":["D:/thankyoustickers/Web-Application-Security-based-on-OWASP/src/pages/LogDetail.jsx"],"sourcesContent":["useEffect(() => {\r\n    const fetchLogs = async () => {\r\n        try {\r\n            const response = await fetch('http://localhost/backend/api/get_logs.php');\r\n            if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);\r\n\r\n            const data = await response.json();\r\n\r\n            if (data.success) {\r\n                setLoginAttempts(data.attempts);\r\n\r\n                const log = data.attempts.find(attempt => attempt.id == logId);\r\n                if (log) {\r\n                    setSelectedLog(log);\r\n\r\n                    const recentFailedAttempts = data.attempts.filter(\r\n                        attempt =>\r\n                            attempt.ip_address === log.ip_address &&\r\n                            parseInt(attempt.success) === 0 &&\r\n                            new Date(attempt.attempt_time) > new Date(Date.now() - 30 * 60 * 1000)\r\n                    );\r\n\r\n                    // Show warning only if it's not already shown for this log\r\n                    if (recentFailedAttempts.length >= 5) {\r\n                        setIsBruteForce(true);\r\n                    } else {\r\n                        setIsBruteForce(false); // Reset when not brute force\r\n                    }\r\n                }\r\n            }\r\n        } catch (error) {\r\n            console.error('Error fetching logs:', error);\r\n        }\r\n    };\r\n\r\n    if (isOpen && logId) {\r\n        fetchLogs();\r\n    } else {\r\n        setIsBruteForce(false); // Reset when modal closes\r\n        setSelectedLog(null);\r\n    }\r\n}, [isOpen, logId]);\r\nexport default LogDetail;"],"mappings":"AAAAA,SAAS,CAAC,MAAM;EACZ,MAAMC,SAAS,GAAG,MAAAA,CAAA,KAAY;IAC1B,IAAI;MACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,2CAA2C,CAAC;MACzE,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,uBAAuBH,QAAQ,CAACI,MAAM,EAAE,CAAC;MAE3E,MAAMC,IAAI,GAAG,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC;MAElC,IAAID,IAAI,CAACE,OAAO,EAAE;QACdC,gBAAgB,CAACH,IAAI,CAACI,QAAQ,CAAC;QAE/B,MAAMC,GAAG,GAAGL,IAAI,CAACI,QAAQ,CAACE,IAAI,CAACC,OAAO,IAAIA,OAAO,CAACC,EAAE,IAAIC,KAAK,CAAC;QAC9D,IAAIJ,GAAG,EAAE;UACLK,cAAc,CAACL,GAAG,CAAC;UAEnB,MAAMM,oBAAoB,GAAGX,IAAI,CAACI,QAAQ,CAACQ,MAAM,CAC7CL,OAAO,IACHA,OAAO,CAACM,UAAU,KAAKR,GAAG,CAACQ,UAAU,IACrCC,QAAQ,CAACP,OAAO,CAACL,OAAO,CAAC,KAAK,CAAC,IAC/B,IAAIa,IAAI,CAACR,OAAO,CAACS,YAAY,CAAC,GAAG,IAAID,IAAI,CAACA,IAAI,CAACE,GAAG,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAC7E,CAAC;;UAED;UACA,IAAIN,oBAAoB,CAACO,MAAM,IAAI,CAAC,EAAE;YAClCC,eAAe,CAAC,IAAI,CAAC;UACzB,CAAC,MAAM;YACHA,eAAe,CAAC,KAAK,CAAC,CAAC,CAAC;UAC5B;QACJ;MACJ;IACJ,CAAC,CAAC,OAAOC,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAChD;EACJ,CAAC;EAED,IAAIE,MAAM,IAAIb,KAAK,EAAE;IACjBf,SAAS,CAAC,CAAC;EACf,CAAC,MAAM;IACHyB,eAAe,CAAC,KAAK,CAAC,CAAC,CAAC;IACxBT,cAAc,CAAC,IAAI,CAAC;EACxB;AACJ,CAAC,EAAE,CAACY,MAAM,EAAEb,KAAK,CAAC,CAAC;AACnB,eAAec,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}